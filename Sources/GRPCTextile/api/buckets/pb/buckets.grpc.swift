//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: api/buckets/pb/buckets.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Dispatch
import Foundation
import SwiftGRPC
import SwiftProtobuf

internal protocol Buckets_Pb_APIListCall: ClientCallUnary {}

fileprivate final class Buckets_Pb_APIListCallBase: ClientCallUnaryBase<Buckets_Pb_ListRequest, Buckets_Pb_ListReply>, Buckets_Pb_APIListCall {
  override class var method: String { return "/buckets.pb.API/List" }
}

internal protocol Buckets_Pb_APIInitCall: ClientCallUnary {}

fileprivate final class Buckets_Pb_APIInitCallBase: ClientCallUnaryBase<Buckets_Pb_InitRequest, Buckets_Pb_InitReply>, Buckets_Pb_APIInitCall {
  override class var method: String { return "/buckets.pb.API/Init" }
}

internal protocol Buckets_Pb_APIRootCall: ClientCallUnary {}

fileprivate final class Buckets_Pb_APIRootCallBase: ClientCallUnaryBase<Buckets_Pb_RootRequest, Buckets_Pb_RootReply>, Buckets_Pb_APIRootCall {
  override class var method: String { return "/buckets.pb.API/Root" }
}

internal protocol Buckets_Pb_APILinksCall: ClientCallUnary {}

fileprivate final class Buckets_Pb_APILinksCallBase: ClientCallUnaryBase<Buckets_Pb_LinksRequest, Buckets_Pb_LinksReply>, Buckets_Pb_APILinksCall {
  override class var method: String { return "/buckets.pb.API/Links" }
}

internal protocol Buckets_Pb_APIListPathCall: ClientCallUnary {}

fileprivate final class Buckets_Pb_APIListPathCallBase: ClientCallUnaryBase<Buckets_Pb_ListPathRequest, Buckets_Pb_ListPathReply>, Buckets_Pb_APIListPathCall {
  override class var method: String { return "/buckets.pb.API/ListPath" }
}

internal protocol Buckets_Pb_APIListIpfsPathCall: ClientCallUnary {}

fileprivate final class Buckets_Pb_APIListIpfsPathCallBase: ClientCallUnaryBase<Buckets_Pb_ListIpfsPathRequest, Buckets_Pb_ListIpfsPathReply>, Buckets_Pb_APIListIpfsPathCall {
  override class var method: String { return "/buckets.pb.API/ListIpfsPath" }
}

internal protocol Buckets_Pb_APIPushPathCall: ClientCallBidirectionalStreaming {
  /// Do not call this directly, call `receive()` in the protocol extension below instead.
  func _receive(timeout: DispatchTime) throws -> Buckets_Pb_PushPathReply?
  /// Call this to wait for a result. Nonblocking.
  func receive(completion: @escaping (ResultOrRPCError<Buckets_Pb_PushPathReply?>) -> Void) throws

  /// Send a message to the stream. Nonblocking.
  func send(_ message: Buckets_Pb_PushPathRequest, completion: @escaping (Error?) -> Void) throws
  /// Do not call this directly, call `send()` in the protocol extension below instead.
  func _send(_ message: Buckets_Pb_PushPathRequest, timeout: DispatchTime) throws

  /// Call this to close the sending connection. Blocking.
  func closeSend() throws
  /// Call this to close the sending connection. Nonblocking.
  func closeSend(completion: (() -> Void)?) throws
}

internal extension Buckets_Pb_APIPushPathCall {
  /// Call this to wait for a result. Blocking.
  func receive(timeout: DispatchTime = .distantFuture) throws -> Buckets_Pb_PushPathReply? { return try self._receive(timeout: timeout) }
}

internal extension Buckets_Pb_APIPushPathCall {
  /// Send a message to the stream and wait for the send operation to finish. Blocking.
  func send(_ message: Buckets_Pb_PushPathRequest, timeout: DispatchTime = .distantFuture) throws { try self._send(message, timeout: timeout) }
}

fileprivate final class Buckets_Pb_APIPushPathCallBase: ClientCallBidirectionalStreamingBase<Buckets_Pb_PushPathRequest, Buckets_Pb_PushPathReply>, Buckets_Pb_APIPushPathCall {
  override class var method: String { return "/buckets.pb.API/PushPath" }
}

internal protocol Buckets_Pb_APIPullPathCall: ClientCallServerStreaming {
  /// Do not call this directly, call `receive()` in the protocol extension below instead.
  func _receive(timeout: DispatchTime) throws -> Buckets_Pb_PullPathReply?
  /// Call this to wait for a result. Nonblocking.
  func receive(completion: @escaping (ResultOrRPCError<Buckets_Pb_PullPathReply?>) -> Void) throws
}

internal extension Buckets_Pb_APIPullPathCall {
  /// Call this to wait for a result. Blocking.
  func receive(timeout: DispatchTime = .distantFuture) throws -> Buckets_Pb_PullPathReply? { return try self._receive(timeout: timeout) }
}

fileprivate final class Buckets_Pb_APIPullPathCallBase: ClientCallServerStreamingBase<Buckets_Pb_PullPathRequest, Buckets_Pb_PullPathReply>, Buckets_Pb_APIPullPathCall {
  override class var method: String { return "/buckets.pb.API/PullPath" }
}

internal protocol Buckets_Pb_APIPullIpfsPathCall: ClientCallServerStreaming {
  /// Do not call this directly, call `receive()` in the protocol extension below instead.
  func _receive(timeout: DispatchTime) throws -> Buckets_Pb_PullIpfsPathReply?
  /// Call this to wait for a result. Nonblocking.
  func receive(completion: @escaping (ResultOrRPCError<Buckets_Pb_PullIpfsPathReply?>) -> Void) throws
}

internal extension Buckets_Pb_APIPullIpfsPathCall {
  /// Call this to wait for a result. Blocking.
  func receive(timeout: DispatchTime = .distantFuture) throws -> Buckets_Pb_PullIpfsPathReply? { return try self._receive(timeout: timeout) }
}

fileprivate final class Buckets_Pb_APIPullIpfsPathCallBase: ClientCallServerStreamingBase<Buckets_Pb_PullIpfsPathRequest, Buckets_Pb_PullIpfsPathReply>, Buckets_Pb_APIPullIpfsPathCall {
  override class var method: String { return "/buckets.pb.API/PullIpfsPath" }
}

internal protocol Buckets_Pb_APISetPathCall: ClientCallUnary {}

fileprivate final class Buckets_Pb_APISetPathCallBase: ClientCallUnaryBase<Buckets_Pb_SetPathRequest, Buckets_Pb_SetPathReply>, Buckets_Pb_APISetPathCall {
  override class var method: String { return "/buckets.pb.API/SetPath" }
}

internal protocol Buckets_Pb_APIRemoveCall: ClientCallUnary {}

fileprivate final class Buckets_Pb_APIRemoveCallBase: ClientCallUnaryBase<Buckets_Pb_RemoveRequest, Buckets_Pb_RemoveReply>, Buckets_Pb_APIRemoveCall {
  override class var method: String { return "/buckets.pb.API/Remove" }
}

internal protocol Buckets_Pb_APIRemovePathCall: ClientCallUnary {}

fileprivate final class Buckets_Pb_APIRemovePathCallBase: ClientCallUnaryBase<Buckets_Pb_RemovePathRequest, Buckets_Pb_RemovePathReply>, Buckets_Pb_APIRemovePathCall {
  override class var method: String { return "/buckets.pb.API/RemovePath" }
}

internal protocol Buckets_Pb_APIArchiveCall: ClientCallUnary {}

fileprivate final class Buckets_Pb_APIArchiveCallBase: ClientCallUnaryBase<Buckets_Pb_ArchiveRequest, Buckets_Pb_ArchiveReply>, Buckets_Pb_APIArchiveCall {
  override class var method: String { return "/buckets.pb.API/Archive" }
}

internal protocol Buckets_Pb_APIArchiveStatusCall: ClientCallUnary {}

fileprivate final class Buckets_Pb_APIArchiveStatusCallBase: ClientCallUnaryBase<Buckets_Pb_ArchiveStatusRequest, Buckets_Pb_ArchiveStatusReply>, Buckets_Pb_APIArchiveStatusCall {
  override class var method: String { return "/buckets.pb.API/ArchiveStatus" }
}

internal protocol Buckets_Pb_APIArchiveInfoCall: ClientCallUnary {}

fileprivate final class Buckets_Pb_APIArchiveInfoCallBase: ClientCallUnaryBase<Buckets_Pb_ArchiveInfoRequest, Buckets_Pb_ArchiveInfoReply>, Buckets_Pb_APIArchiveInfoCall {
  override class var method: String { return "/buckets.pb.API/ArchiveInfo" }
}

internal protocol Buckets_Pb_APIArchiveWatchCall: ClientCallServerStreaming {
  /// Do not call this directly, call `receive()` in the protocol extension below instead.
  func _receive(timeout: DispatchTime) throws -> Buckets_Pb_ArchiveWatchReply?
  /// Call this to wait for a result. Nonblocking.
  func receive(completion: @escaping (ResultOrRPCError<Buckets_Pb_ArchiveWatchReply?>) -> Void) throws
}

internal extension Buckets_Pb_APIArchiveWatchCall {
  /// Call this to wait for a result. Blocking.
  func receive(timeout: DispatchTime = .distantFuture) throws -> Buckets_Pb_ArchiveWatchReply? { return try self._receive(timeout: timeout) }
}

fileprivate final class Buckets_Pb_APIArchiveWatchCallBase: ClientCallServerStreamingBase<Buckets_Pb_ArchiveWatchRequest, Buckets_Pb_ArchiveWatchReply>, Buckets_Pb_APIArchiveWatchCall {
  override class var method: String { return "/buckets.pb.API/ArchiveWatch" }
}


/// Instantiate Buckets_Pb_APIServiceClient, then call methods of this protocol to make API calls.
internal protocol Buckets_Pb_APIService: ServiceClient {
  /// Synchronous. Unary.
  func list(_ request: Buckets_Pb_ListRequest, metadata customMetadata: Metadata) throws -> Buckets_Pb_ListReply
  /// Asynchronous. Unary.
  @discardableResult
  func list(_ request: Buckets_Pb_ListRequest, metadata customMetadata: Metadata, completion: @escaping (Buckets_Pb_ListReply?, CallResult) -> Void) throws -> Buckets_Pb_APIListCall

  /// Synchronous. Unary.
  func init(_ request: Buckets_Pb_InitRequest, metadata customMetadata: Metadata) throws -> Buckets_Pb_InitReply
  /// Asynchronous. Unary.
  @discardableResult
  func init(_ request: Buckets_Pb_InitRequest, metadata customMetadata: Metadata, completion: @escaping (Buckets_Pb_InitReply?, CallResult) -> Void) throws -> Buckets_Pb_APIInitCall

  /// Synchronous. Unary.
  func root(_ request: Buckets_Pb_RootRequest, metadata customMetadata: Metadata) throws -> Buckets_Pb_RootReply
  /// Asynchronous. Unary.
  @discardableResult
  func root(_ request: Buckets_Pb_RootRequest, metadata customMetadata: Metadata, completion: @escaping (Buckets_Pb_RootReply?, CallResult) -> Void) throws -> Buckets_Pb_APIRootCall

  /// Synchronous. Unary.
  func links(_ request: Buckets_Pb_LinksRequest, metadata customMetadata: Metadata) throws -> Buckets_Pb_LinksReply
  /// Asynchronous. Unary.
  @discardableResult
  func links(_ request: Buckets_Pb_LinksRequest, metadata customMetadata: Metadata, completion: @escaping (Buckets_Pb_LinksReply?, CallResult) -> Void) throws -> Buckets_Pb_APILinksCall

  /// Synchronous. Unary.
  func listPath(_ request: Buckets_Pb_ListPathRequest, metadata customMetadata: Metadata) throws -> Buckets_Pb_ListPathReply
  /// Asynchronous. Unary.
  @discardableResult
  func listPath(_ request: Buckets_Pb_ListPathRequest, metadata customMetadata: Metadata, completion: @escaping (Buckets_Pb_ListPathReply?, CallResult) -> Void) throws -> Buckets_Pb_APIListPathCall

  /// Synchronous. Unary.
  func listIpfsPath(_ request: Buckets_Pb_ListIpfsPathRequest, metadata customMetadata: Metadata) throws -> Buckets_Pb_ListIpfsPathReply
  /// Asynchronous. Unary.
  @discardableResult
  func listIpfsPath(_ request: Buckets_Pb_ListIpfsPathRequest, metadata customMetadata: Metadata, completion: @escaping (Buckets_Pb_ListIpfsPathReply?, CallResult) -> Void) throws -> Buckets_Pb_APIListIpfsPathCall

  /// Asynchronous. Bidirectional-streaming.
  /// Use methods on the returned object to stream messages,
  /// to wait for replies, and to close the connection.
  func pushPath(metadata customMetadata: Metadata, completion: ((CallResult) -> Void)?) throws -> Buckets_Pb_APIPushPathCall

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  func pullPath(_ request: Buckets_Pb_PullPathRequest, metadata customMetadata: Metadata, completion: ((CallResult) -> Void)?) throws -> Buckets_Pb_APIPullPathCall

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  func pullIpfsPath(_ request: Buckets_Pb_PullIpfsPathRequest, metadata customMetadata: Metadata, completion: ((CallResult) -> Void)?) throws -> Buckets_Pb_APIPullIpfsPathCall

  /// Synchronous. Unary.
  func setPath(_ request: Buckets_Pb_SetPathRequest, metadata customMetadata: Metadata) throws -> Buckets_Pb_SetPathReply
  /// Asynchronous. Unary.
  @discardableResult
  func setPath(_ request: Buckets_Pb_SetPathRequest, metadata customMetadata: Metadata, completion: @escaping (Buckets_Pb_SetPathReply?, CallResult) -> Void) throws -> Buckets_Pb_APISetPathCall

  /// Synchronous. Unary.
  func remove(_ request: Buckets_Pb_RemoveRequest, metadata customMetadata: Metadata) throws -> Buckets_Pb_RemoveReply
  /// Asynchronous. Unary.
  @discardableResult
  func remove(_ request: Buckets_Pb_RemoveRequest, metadata customMetadata: Metadata, completion: @escaping (Buckets_Pb_RemoveReply?, CallResult) -> Void) throws -> Buckets_Pb_APIRemoveCall

  /// Synchronous. Unary.
  func removePath(_ request: Buckets_Pb_RemovePathRequest, metadata customMetadata: Metadata) throws -> Buckets_Pb_RemovePathReply
  /// Asynchronous. Unary.
  @discardableResult
  func removePath(_ request: Buckets_Pb_RemovePathRequest, metadata customMetadata: Metadata, completion: @escaping (Buckets_Pb_RemovePathReply?, CallResult) -> Void) throws -> Buckets_Pb_APIRemovePathCall

  /// Synchronous. Unary.
  func archive(_ request: Buckets_Pb_ArchiveRequest, metadata customMetadata: Metadata) throws -> Buckets_Pb_ArchiveReply
  /// Asynchronous. Unary.
  @discardableResult
  func archive(_ request: Buckets_Pb_ArchiveRequest, metadata customMetadata: Metadata, completion: @escaping (Buckets_Pb_ArchiveReply?, CallResult) -> Void) throws -> Buckets_Pb_APIArchiveCall

  /// Synchronous. Unary.
  func archiveStatus(_ request: Buckets_Pb_ArchiveStatusRequest, metadata customMetadata: Metadata) throws -> Buckets_Pb_ArchiveStatusReply
  /// Asynchronous. Unary.
  @discardableResult
  func archiveStatus(_ request: Buckets_Pb_ArchiveStatusRequest, metadata customMetadata: Metadata, completion: @escaping (Buckets_Pb_ArchiveStatusReply?, CallResult) -> Void) throws -> Buckets_Pb_APIArchiveStatusCall

  /// Synchronous. Unary.
  func archiveInfo(_ request: Buckets_Pb_ArchiveInfoRequest, metadata customMetadata: Metadata) throws -> Buckets_Pb_ArchiveInfoReply
  /// Asynchronous. Unary.
  @discardableResult
  func archiveInfo(_ request: Buckets_Pb_ArchiveInfoRequest, metadata customMetadata: Metadata, completion: @escaping (Buckets_Pb_ArchiveInfoReply?, CallResult) -> Void) throws -> Buckets_Pb_APIArchiveInfoCall

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  func archiveWatch(_ request: Buckets_Pb_ArchiveWatchRequest, metadata customMetadata: Metadata, completion: ((CallResult) -> Void)?) throws -> Buckets_Pb_APIArchiveWatchCall

}

internal extension Buckets_Pb_APIService {
  /// Synchronous. Unary.
  func list(_ request: Buckets_Pb_ListRequest) throws -> Buckets_Pb_ListReply {
    return try self.list(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func list(_ request: Buckets_Pb_ListRequest, completion: @escaping (Buckets_Pb_ListReply?, CallResult) -> Void) throws -> Buckets_Pb_APIListCall {
    return try self.list(request, metadata: self.metadata, completion: completion)
  }

  /// Synchronous. Unary.
  func init(_ request: Buckets_Pb_InitRequest) throws -> Buckets_Pb_InitReply {
    return try self.init(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func init(_ request: Buckets_Pb_InitRequest, completion: @escaping (Buckets_Pb_InitReply?, CallResult) -> Void) throws -> Buckets_Pb_APIInitCall {
    return try self.init(request, metadata: self.metadata, completion: completion)
  }

  /// Synchronous. Unary.
  func root(_ request: Buckets_Pb_RootRequest) throws -> Buckets_Pb_RootReply {
    return try self.root(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func root(_ request: Buckets_Pb_RootRequest, completion: @escaping (Buckets_Pb_RootReply?, CallResult) -> Void) throws -> Buckets_Pb_APIRootCall {
    return try self.root(request, metadata: self.metadata, completion: completion)
  }

  /// Synchronous. Unary.
  func links(_ request: Buckets_Pb_LinksRequest) throws -> Buckets_Pb_LinksReply {
    return try self.links(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func links(_ request: Buckets_Pb_LinksRequest, completion: @escaping (Buckets_Pb_LinksReply?, CallResult) -> Void) throws -> Buckets_Pb_APILinksCall {
    return try self.links(request, metadata: self.metadata, completion: completion)
  }

  /// Synchronous. Unary.
  func listPath(_ request: Buckets_Pb_ListPathRequest) throws -> Buckets_Pb_ListPathReply {
    return try self.listPath(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func listPath(_ request: Buckets_Pb_ListPathRequest, completion: @escaping (Buckets_Pb_ListPathReply?, CallResult) -> Void) throws -> Buckets_Pb_APIListPathCall {
    return try self.listPath(request, metadata: self.metadata, completion: completion)
  }

  /// Synchronous. Unary.
  func listIpfsPath(_ request: Buckets_Pb_ListIpfsPathRequest) throws -> Buckets_Pb_ListIpfsPathReply {
    return try self.listIpfsPath(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func listIpfsPath(_ request: Buckets_Pb_ListIpfsPathRequest, completion: @escaping (Buckets_Pb_ListIpfsPathReply?, CallResult) -> Void) throws -> Buckets_Pb_APIListIpfsPathCall {
    return try self.listIpfsPath(request, metadata: self.metadata, completion: completion)
  }

  /// Asynchronous. Bidirectional-streaming.
  func pushPath(completion: ((CallResult) -> Void)?) throws -> Buckets_Pb_APIPushPathCall {
    return try self.pushPath(metadata: self.metadata, completion: completion)
  }

  /// Asynchronous. Server-streaming.
  func pullPath(_ request: Buckets_Pb_PullPathRequest, completion: ((CallResult) -> Void)?) throws -> Buckets_Pb_APIPullPathCall {
    return try self.pullPath(request, metadata: self.metadata, completion: completion)
  }

  /// Asynchronous. Server-streaming.
  func pullIpfsPath(_ request: Buckets_Pb_PullIpfsPathRequest, completion: ((CallResult) -> Void)?) throws -> Buckets_Pb_APIPullIpfsPathCall {
    return try self.pullIpfsPath(request, metadata: self.metadata, completion: completion)
  }

  /// Synchronous. Unary.
  func setPath(_ request: Buckets_Pb_SetPathRequest) throws -> Buckets_Pb_SetPathReply {
    return try self.setPath(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func setPath(_ request: Buckets_Pb_SetPathRequest, completion: @escaping (Buckets_Pb_SetPathReply?, CallResult) -> Void) throws -> Buckets_Pb_APISetPathCall {
    return try self.setPath(request, metadata: self.metadata, completion: completion)
  }

  /// Synchronous. Unary.
  func remove(_ request: Buckets_Pb_RemoveRequest) throws -> Buckets_Pb_RemoveReply {
    return try self.remove(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func remove(_ request: Buckets_Pb_RemoveRequest, completion: @escaping (Buckets_Pb_RemoveReply?, CallResult) -> Void) throws -> Buckets_Pb_APIRemoveCall {
    return try self.remove(request, metadata: self.metadata, completion: completion)
  }

  /// Synchronous. Unary.
  func removePath(_ request: Buckets_Pb_RemovePathRequest) throws -> Buckets_Pb_RemovePathReply {
    return try self.removePath(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func removePath(_ request: Buckets_Pb_RemovePathRequest, completion: @escaping (Buckets_Pb_RemovePathReply?, CallResult) -> Void) throws -> Buckets_Pb_APIRemovePathCall {
    return try self.removePath(request, metadata: self.metadata, completion: completion)
  }

  /// Synchronous. Unary.
  func archive(_ request: Buckets_Pb_ArchiveRequest) throws -> Buckets_Pb_ArchiveReply {
    return try self.archive(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func archive(_ request: Buckets_Pb_ArchiveRequest, completion: @escaping (Buckets_Pb_ArchiveReply?, CallResult) -> Void) throws -> Buckets_Pb_APIArchiveCall {
    return try self.archive(request, metadata: self.metadata, completion: completion)
  }

  /// Synchronous. Unary.
  func archiveStatus(_ request: Buckets_Pb_ArchiveStatusRequest) throws -> Buckets_Pb_ArchiveStatusReply {
    return try self.archiveStatus(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func archiveStatus(_ request: Buckets_Pb_ArchiveStatusRequest, completion: @escaping (Buckets_Pb_ArchiveStatusReply?, CallResult) -> Void) throws -> Buckets_Pb_APIArchiveStatusCall {
    return try self.archiveStatus(request, metadata: self.metadata, completion: completion)
  }

  /// Synchronous. Unary.
  func archiveInfo(_ request: Buckets_Pb_ArchiveInfoRequest) throws -> Buckets_Pb_ArchiveInfoReply {
    return try self.archiveInfo(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func archiveInfo(_ request: Buckets_Pb_ArchiveInfoRequest, completion: @escaping (Buckets_Pb_ArchiveInfoReply?, CallResult) -> Void) throws -> Buckets_Pb_APIArchiveInfoCall {
    return try self.archiveInfo(request, metadata: self.metadata, completion: completion)
  }

  /// Asynchronous. Server-streaming.
  func archiveWatch(_ request: Buckets_Pb_ArchiveWatchRequest, completion: ((CallResult) -> Void)?) throws -> Buckets_Pb_APIArchiveWatchCall {
    return try self.archiveWatch(request, metadata: self.metadata, completion: completion)
  }

}

internal final class Buckets_Pb_APIServiceClient: ServiceClientBase, Buckets_Pb_APIService {
  /// Synchronous. Unary.
  internal func list(_ request: Buckets_Pb_ListRequest, metadata customMetadata: Metadata) throws -> Buckets_Pb_ListReply {
    return try Buckets_Pb_APIListCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func list(_ request: Buckets_Pb_ListRequest, metadata customMetadata: Metadata, completion: @escaping (Buckets_Pb_ListReply?, CallResult) -> Void) throws -> Buckets_Pb_APIListCall {
    return try Buckets_Pb_APIListCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func init(_ request: Buckets_Pb_InitRequest, metadata customMetadata: Metadata) throws -> Buckets_Pb_InitReply {
    return try Buckets_Pb_APIInitCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func init(_ request: Buckets_Pb_InitRequest, metadata customMetadata: Metadata, completion: @escaping (Buckets_Pb_InitReply?, CallResult) -> Void) throws -> Buckets_Pb_APIInitCall {
    return try Buckets_Pb_APIInitCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func root(_ request: Buckets_Pb_RootRequest, metadata customMetadata: Metadata) throws -> Buckets_Pb_RootReply {
    return try Buckets_Pb_APIRootCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func root(_ request: Buckets_Pb_RootRequest, metadata customMetadata: Metadata, completion: @escaping (Buckets_Pb_RootReply?, CallResult) -> Void) throws -> Buckets_Pb_APIRootCall {
    return try Buckets_Pb_APIRootCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func links(_ request: Buckets_Pb_LinksRequest, metadata customMetadata: Metadata) throws -> Buckets_Pb_LinksReply {
    return try Buckets_Pb_APILinksCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func links(_ request: Buckets_Pb_LinksRequest, metadata customMetadata: Metadata, completion: @escaping (Buckets_Pb_LinksReply?, CallResult) -> Void) throws -> Buckets_Pb_APILinksCall {
    return try Buckets_Pb_APILinksCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func listPath(_ request: Buckets_Pb_ListPathRequest, metadata customMetadata: Metadata) throws -> Buckets_Pb_ListPathReply {
    return try Buckets_Pb_APIListPathCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func listPath(_ request: Buckets_Pb_ListPathRequest, metadata customMetadata: Metadata, completion: @escaping (Buckets_Pb_ListPathReply?, CallResult) -> Void) throws -> Buckets_Pb_APIListPathCall {
    return try Buckets_Pb_APIListPathCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func listIpfsPath(_ request: Buckets_Pb_ListIpfsPathRequest, metadata customMetadata: Metadata) throws -> Buckets_Pb_ListIpfsPathReply {
    return try Buckets_Pb_APIListIpfsPathCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func listIpfsPath(_ request: Buckets_Pb_ListIpfsPathRequest, metadata customMetadata: Metadata, completion: @escaping (Buckets_Pb_ListIpfsPathReply?, CallResult) -> Void) throws -> Buckets_Pb_APIListIpfsPathCall {
    return try Buckets_Pb_APIListIpfsPathCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Asynchronous. Bidirectional-streaming.
  /// Use methods on the returned object to stream messages,
  /// to wait for replies, and to close the connection.
  internal func pushPath(metadata customMetadata: Metadata, completion: ((CallResult) -> Void)?) throws -> Buckets_Pb_APIPushPathCall {
    return try Buckets_Pb_APIPushPathCallBase(channel)
      .start(metadata: customMetadata, completion: completion)
  }

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  internal func pullPath(_ request: Buckets_Pb_PullPathRequest, metadata customMetadata: Metadata, completion: ((CallResult) -> Void)?) throws -> Buckets_Pb_APIPullPathCall {
    return try Buckets_Pb_APIPullPathCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  internal func pullIpfsPath(_ request: Buckets_Pb_PullIpfsPathRequest, metadata customMetadata: Metadata, completion: ((CallResult) -> Void)?) throws -> Buckets_Pb_APIPullIpfsPathCall {
    return try Buckets_Pb_APIPullIpfsPathCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func setPath(_ request: Buckets_Pb_SetPathRequest, metadata customMetadata: Metadata) throws -> Buckets_Pb_SetPathReply {
    return try Buckets_Pb_APISetPathCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func setPath(_ request: Buckets_Pb_SetPathRequest, metadata customMetadata: Metadata, completion: @escaping (Buckets_Pb_SetPathReply?, CallResult) -> Void) throws -> Buckets_Pb_APISetPathCall {
    return try Buckets_Pb_APISetPathCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func remove(_ request: Buckets_Pb_RemoveRequest, metadata customMetadata: Metadata) throws -> Buckets_Pb_RemoveReply {
    return try Buckets_Pb_APIRemoveCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func remove(_ request: Buckets_Pb_RemoveRequest, metadata customMetadata: Metadata, completion: @escaping (Buckets_Pb_RemoveReply?, CallResult) -> Void) throws -> Buckets_Pb_APIRemoveCall {
    return try Buckets_Pb_APIRemoveCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func removePath(_ request: Buckets_Pb_RemovePathRequest, metadata customMetadata: Metadata) throws -> Buckets_Pb_RemovePathReply {
    return try Buckets_Pb_APIRemovePathCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func removePath(_ request: Buckets_Pb_RemovePathRequest, metadata customMetadata: Metadata, completion: @escaping (Buckets_Pb_RemovePathReply?, CallResult) -> Void) throws -> Buckets_Pb_APIRemovePathCall {
    return try Buckets_Pb_APIRemovePathCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func archive(_ request: Buckets_Pb_ArchiveRequest, metadata customMetadata: Metadata) throws -> Buckets_Pb_ArchiveReply {
    return try Buckets_Pb_APIArchiveCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func archive(_ request: Buckets_Pb_ArchiveRequest, metadata customMetadata: Metadata, completion: @escaping (Buckets_Pb_ArchiveReply?, CallResult) -> Void) throws -> Buckets_Pb_APIArchiveCall {
    return try Buckets_Pb_APIArchiveCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func archiveStatus(_ request: Buckets_Pb_ArchiveStatusRequest, metadata customMetadata: Metadata) throws -> Buckets_Pb_ArchiveStatusReply {
    return try Buckets_Pb_APIArchiveStatusCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func archiveStatus(_ request: Buckets_Pb_ArchiveStatusRequest, metadata customMetadata: Metadata, completion: @escaping (Buckets_Pb_ArchiveStatusReply?, CallResult) -> Void) throws -> Buckets_Pb_APIArchiveStatusCall {
    return try Buckets_Pb_APIArchiveStatusCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Synchronous. Unary.
  internal func archiveInfo(_ request: Buckets_Pb_ArchiveInfoRequest, metadata customMetadata: Metadata) throws -> Buckets_Pb_ArchiveInfoReply {
    return try Buckets_Pb_APIArchiveInfoCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  internal func archiveInfo(_ request: Buckets_Pb_ArchiveInfoRequest, metadata customMetadata: Metadata, completion: @escaping (Buckets_Pb_ArchiveInfoReply?, CallResult) -> Void) throws -> Buckets_Pb_APIArchiveInfoCall {
    return try Buckets_Pb_APIArchiveInfoCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Asynchronous. Server-streaming.
  /// Send the initial message.
  /// Use methods on the returned object to get streamed responses.
  internal func archiveWatch(_ request: Buckets_Pb_ArchiveWatchRequest, metadata customMetadata: Metadata, completion: ((CallResult) -> Void)?) throws -> Buckets_Pb_APIArchiveWatchCall {
    return try Buckets_Pb_APIArchiveWatchCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

}

/// To build a server, implement a class that conforms to this protocol.
/// If one of the methods returning `ServerStatus?` returns nil,
/// it is expected that you have already returned a status to the client by means of `session.close`.
internal protocol Buckets_Pb_APIProvider: ServiceProvider {
  func list(request: Buckets_Pb_ListRequest, session: Buckets_Pb_APIListSession) throws -> Buckets_Pb_ListReply
  func init(request: Buckets_Pb_InitRequest, session: Buckets_Pb_APIInitSession) throws -> Buckets_Pb_InitReply
  func root(request: Buckets_Pb_RootRequest, session: Buckets_Pb_APIRootSession) throws -> Buckets_Pb_RootReply
  func links(request: Buckets_Pb_LinksRequest, session: Buckets_Pb_APILinksSession) throws -> Buckets_Pb_LinksReply
  func listPath(request: Buckets_Pb_ListPathRequest, session: Buckets_Pb_APIListPathSession) throws -> Buckets_Pb_ListPathReply
  func listIpfsPath(request: Buckets_Pb_ListIpfsPathRequest, session: Buckets_Pb_APIListIpfsPathSession) throws -> Buckets_Pb_ListIpfsPathReply
  func pushPath(session: Buckets_Pb_APIPushPathSession) throws -> ServerStatus?
  func pullPath(request: Buckets_Pb_PullPathRequest, session: Buckets_Pb_APIPullPathSession) throws -> ServerStatus?
  func pullIpfsPath(request: Buckets_Pb_PullIpfsPathRequest, session: Buckets_Pb_APIPullIpfsPathSession) throws -> ServerStatus?
  func setPath(request: Buckets_Pb_SetPathRequest, session: Buckets_Pb_APISetPathSession) throws -> Buckets_Pb_SetPathReply
  func remove(request: Buckets_Pb_RemoveRequest, session: Buckets_Pb_APIRemoveSession) throws -> Buckets_Pb_RemoveReply
  func removePath(request: Buckets_Pb_RemovePathRequest, session: Buckets_Pb_APIRemovePathSession) throws -> Buckets_Pb_RemovePathReply
  func archive(request: Buckets_Pb_ArchiveRequest, session: Buckets_Pb_APIArchiveSession) throws -> Buckets_Pb_ArchiveReply
  func archiveStatus(request: Buckets_Pb_ArchiveStatusRequest, session: Buckets_Pb_APIArchiveStatusSession) throws -> Buckets_Pb_ArchiveStatusReply
  func archiveInfo(request: Buckets_Pb_ArchiveInfoRequest, session: Buckets_Pb_APIArchiveInfoSession) throws -> Buckets_Pb_ArchiveInfoReply
  func archiveWatch(request: Buckets_Pb_ArchiveWatchRequest, session: Buckets_Pb_APIArchiveWatchSession) throws -> ServerStatus?
}

extension Buckets_Pb_APIProvider {
  internal var serviceName: String { return "buckets.pb.API" }

  /// Determines and calls the appropriate request handler, depending on the request's method.
  /// Throws `HandleMethodError.unknownMethod` for methods not handled by this service.
  internal func handleMethod(_ method: String, handler: Handler) throws -> ServerStatus? {
    switch method {
    case "/buckets.pb.API/List":
      return try Buckets_Pb_APIListSessionBase(
        handler: handler,
        providerBlock: { try self.list(request: $0, session: $1 as! Buckets_Pb_APIListSessionBase) })
          .run()
    case "/buckets.pb.API/Init":
      return try Buckets_Pb_APIInitSessionBase(
        handler: handler,
        providerBlock: { try self.init(request: $0, session: $1 as! Buckets_Pb_APIInitSessionBase) })
          .run()
    case "/buckets.pb.API/Root":
      return try Buckets_Pb_APIRootSessionBase(
        handler: handler,
        providerBlock: { try self.root(request: $0, session: $1 as! Buckets_Pb_APIRootSessionBase) })
          .run()
    case "/buckets.pb.API/Links":
      return try Buckets_Pb_APILinksSessionBase(
        handler: handler,
        providerBlock: { try self.links(request: $0, session: $1 as! Buckets_Pb_APILinksSessionBase) })
          .run()
    case "/buckets.pb.API/ListPath":
      return try Buckets_Pb_APIListPathSessionBase(
        handler: handler,
        providerBlock: { try self.listPath(request: $0, session: $1 as! Buckets_Pb_APIListPathSessionBase) })
          .run()
    case "/buckets.pb.API/ListIpfsPath":
      return try Buckets_Pb_APIListIpfsPathSessionBase(
        handler: handler,
        providerBlock: { try self.listIpfsPath(request: $0, session: $1 as! Buckets_Pb_APIListIpfsPathSessionBase) })
          .run()
    case "/buckets.pb.API/PushPath":
      return try Buckets_Pb_APIPushPathSessionBase(
        handler: handler,
        providerBlock: { try self.pushPath(session: $0 as! Buckets_Pb_APIPushPathSessionBase) })
          .run()
    case "/buckets.pb.API/PullPath":
      return try Buckets_Pb_APIPullPathSessionBase(
        handler: handler,
        providerBlock: { try self.pullPath(request: $0, session: $1 as! Buckets_Pb_APIPullPathSessionBase) })
          .run()
    case "/buckets.pb.API/PullIpfsPath":
      return try Buckets_Pb_APIPullIpfsPathSessionBase(
        handler: handler,
        providerBlock: { try self.pullIpfsPath(request: $0, session: $1 as! Buckets_Pb_APIPullIpfsPathSessionBase) })
          .run()
    case "/buckets.pb.API/SetPath":
      return try Buckets_Pb_APISetPathSessionBase(
        handler: handler,
        providerBlock: { try self.setPath(request: $0, session: $1 as! Buckets_Pb_APISetPathSessionBase) })
          .run()
    case "/buckets.pb.API/Remove":
      return try Buckets_Pb_APIRemoveSessionBase(
        handler: handler,
        providerBlock: { try self.remove(request: $0, session: $1 as! Buckets_Pb_APIRemoveSessionBase) })
          .run()
    case "/buckets.pb.API/RemovePath":
      return try Buckets_Pb_APIRemovePathSessionBase(
        handler: handler,
        providerBlock: { try self.removePath(request: $0, session: $1 as! Buckets_Pb_APIRemovePathSessionBase) })
          .run()
    case "/buckets.pb.API/Archive":
      return try Buckets_Pb_APIArchiveSessionBase(
        handler: handler,
        providerBlock: { try self.archive(request: $0, session: $1 as! Buckets_Pb_APIArchiveSessionBase) })
          .run()
    case "/buckets.pb.API/ArchiveStatus":
      return try Buckets_Pb_APIArchiveStatusSessionBase(
        handler: handler,
        providerBlock: { try self.archiveStatus(request: $0, session: $1 as! Buckets_Pb_APIArchiveStatusSessionBase) })
          .run()
    case "/buckets.pb.API/ArchiveInfo":
      return try Buckets_Pb_APIArchiveInfoSessionBase(
        handler: handler,
        providerBlock: { try self.archiveInfo(request: $0, session: $1 as! Buckets_Pb_APIArchiveInfoSessionBase) })
          .run()
    case "/buckets.pb.API/ArchiveWatch":
      return try Buckets_Pb_APIArchiveWatchSessionBase(
        handler: handler,
        providerBlock: { try self.archiveWatch(request: $0, session: $1 as! Buckets_Pb_APIArchiveWatchSessionBase) })
          .run()
    default:
      throw HandleMethodError.unknownMethod
    }
  }
}

internal protocol Buckets_Pb_APIListSession: ServerSessionUnary {}

fileprivate final class Buckets_Pb_APIListSessionBase: ServerSessionUnaryBase<Buckets_Pb_ListRequest, Buckets_Pb_ListReply>, Buckets_Pb_APIListSession {}

internal protocol Buckets_Pb_APIInitSession: ServerSessionUnary {}

fileprivate final class Buckets_Pb_APIInitSessionBase: ServerSessionUnaryBase<Buckets_Pb_InitRequest, Buckets_Pb_InitReply>, Buckets_Pb_APIInitSession {}

internal protocol Buckets_Pb_APIRootSession: ServerSessionUnary {}

fileprivate final class Buckets_Pb_APIRootSessionBase: ServerSessionUnaryBase<Buckets_Pb_RootRequest, Buckets_Pb_RootReply>, Buckets_Pb_APIRootSession {}

internal protocol Buckets_Pb_APILinksSession: ServerSessionUnary {}

fileprivate final class Buckets_Pb_APILinksSessionBase: ServerSessionUnaryBase<Buckets_Pb_LinksRequest, Buckets_Pb_LinksReply>, Buckets_Pb_APILinksSession {}

internal protocol Buckets_Pb_APIListPathSession: ServerSessionUnary {}

fileprivate final class Buckets_Pb_APIListPathSessionBase: ServerSessionUnaryBase<Buckets_Pb_ListPathRequest, Buckets_Pb_ListPathReply>, Buckets_Pb_APIListPathSession {}

internal protocol Buckets_Pb_APIListIpfsPathSession: ServerSessionUnary {}

fileprivate final class Buckets_Pb_APIListIpfsPathSessionBase: ServerSessionUnaryBase<Buckets_Pb_ListIpfsPathRequest, Buckets_Pb_ListIpfsPathReply>, Buckets_Pb_APIListIpfsPathSession {}

internal protocol Buckets_Pb_APIPushPathSession: ServerSessionBidirectionalStreaming {
  /// Do not call this directly, call `receive()` in the protocol extension below instead.
  func _receive(timeout: DispatchTime) throws -> Buckets_Pb_PushPathRequest?
  /// Call this to wait for a result. Nonblocking.
  func receive(completion: @escaping (ResultOrRPCError<Buckets_Pb_PushPathRequest?>) -> Void) throws

  /// Send a message to the stream. Nonblocking.
  func send(_ message: Buckets_Pb_PushPathReply, completion: @escaping (Error?) -> Void) throws
  /// Do not call this directly, call `send()` in the protocol extension below instead.
  func _send(_ message: Buckets_Pb_PushPathReply, timeout: DispatchTime) throws

  /// Close the connection and send the status. Non-blocking.
  /// This method should be called if and only if your request handler returns a nil value instead of a server status;
  /// otherwise SwiftGRPC will take care of sending the status for you.
  func close(withStatus status: ServerStatus, completion: (() -> Void)?) throws
}

internal extension Buckets_Pb_APIPushPathSession {
  /// Call this to wait for a result. Blocking.
  func receive(timeout: DispatchTime = .distantFuture) throws -> Buckets_Pb_PushPathRequest? { return try self._receive(timeout: timeout) }
}

internal extension Buckets_Pb_APIPushPathSession {
  /// Send a message to the stream and wait for the send operation to finish. Blocking.
  func send(_ message: Buckets_Pb_PushPathReply, timeout: DispatchTime = .distantFuture) throws { try self._send(message, timeout: timeout) }
}

fileprivate final class Buckets_Pb_APIPushPathSessionBase: ServerSessionBidirectionalStreamingBase<Buckets_Pb_PushPathRequest, Buckets_Pb_PushPathReply>, Buckets_Pb_APIPushPathSession {}

internal protocol Buckets_Pb_APIPullPathSession: ServerSessionServerStreaming {
  /// Send a message to the stream. Nonblocking.
  func send(_ message: Buckets_Pb_PullPathReply, completion: @escaping (Error?) -> Void) throws
  /// Do not call this directly, call `send()` in the protocol extension below instead.
  func _send(_ message: Buckets_Pb_PullPathReply, timeout: DispatchTime) throws

  /// Close the connection and send the status. Non-blocking.
  /// This method should be called if and only if your request handler returns a nil value instead of a server status;
  /// otherwise SwiftGRPC will take care of sending the status for you.
  func close(withStatus status: ServerStatus, completion: (() -> Void)?) throws
}

internal extension Buckets_Pb_APIPullPathSession {
  /// Send a message to the stream and wait for the send operation to finish. Blocking.
  func send(_ message: Buckets_Pb_PullPathReply, timeout: DispatchTime = .distantFuture) throws { try self._send(message, timeout: timeout) }
}

fileprivate final class Buckets_Pb_APIPullPathSessionBase: ServerSessionServerStreamingBase<Buckets_Pb_PullPathRequest, Buckets_Pb_PullPathReply>, Buckets_Pb_APIPullPathSession {}

internal protocol Buckets_Pb_APIPullIpfsPathSession: ServerSessionServerStreaming {
  /// Send a message to the stream. Nonblocking.
  func send(_ message: Buckets_Pb_PullIpfsPathReply, completion: @escaping (Error?) -> Void) throws
  /// Do not call this directly, call `send()` in the protocol extension below instead.
  func _send(_ message: Buckets_Pb_PullIpfsPathReply, timeout: DispatchTime) throws

  /// Close the connection and send the status. Non-blocking.
  /// This method should be called if and only if your request handler returns a nil value instead of a server status;
  /// otherwise SwiftGRPC will take care of sending the status for you.
  func close(withStatus status: ServerStatus, completion: (() -> Void)?) throws
}

internal extension Buckets_Pb_APIPullIpfsPathSession {
  /// Send a message to the stream and wait for the send operation to finish. Blocking.
  func send(_ message: Buckets_Pb_PullIpfsPathReply, timeout: DispatchTime = .distantFuture) throws { try self._send(message, timeout: timeout) }
}

fileprivate final class Buckets_Pb_APIPullIpfsPathSessionBase: ServerSessionServerStreamingBase<Buckets_Pb_PullIpfsPathRequest, Buckets_Pb_PullIpfsPathReply>, Buckets_Pb_APIPullIpfsPathSession {}

internal protocol Buckets_Pb_APISetPathSession: ServerSessionUnary {}

fileprivate final class Buckets_Pb_APISetPathSessionBase: ServerSessionUnaryBase<Buckets_Pb_SetPathRequest, Buckets_Pb_SetPathReply>, Buckets_Pb_APISetPathSession {}

internal protocol Buckets_Pb_APIRemoveSession: ServerSessionUnary {}

fileprivate final class Buckets_Pb_APIRemoveSessionBase: ServerSessionUnaryBase<Buckets_Pb_RemoveRequest, Buckets_Pb_RemoveReply>, Buckets_Pb_APIRemoveSession {}

internal protocol Buckets_Pb_APIRemovePathSession: ServerSessionUnary {}

fileprivate final class Buckets_Pb_APIRemovePathSessionBase: ServerSessionUnaryBase<Buckets_Pb_RemovePathRequest, Buckets_Pb_RemovePathReply>, Buckets_Pb_APIRemovePathSession {}

internal protocol Buckets_Pb_APIArchiveSession: ServerSessionUnary {}

fileprivate final class Buckets_Pb_APIArchiveSessionBase: ServerSessionUnaryBase<Buckets_Pb_ArchiveRequest, Buckets_Pb_ArchiveReply>, Buckets_Pb_APIArchiveSession {}

internal protocol Buckets_Pb_APIArchiveStatusSession: ServerSessionUnary {}

fileprivate final class Buckets_Pb_APIArchiveStatusSessionBase: ServerSessionUnaryBase<Buckets_Pb_ArchiveStatusRequest, Buckets_Pb_ArchiveStatusReply>, Buckets_Pb_APIArchiveStatusSession {}

internal protocol Buckets_Pb_APIArchiveInfoSession: ServerSessionUnary {}

fileprivate final class Buckets_Pb_APIArchiveInfoSessionBase: ServerSessionUnaryBase<Buckets_Pb_ArchiveInfoRequest, Buckets_Pb_ArchiveInfoReply>, Buckets_Pb_APIArchiveInfoSession {}

internal protocol Buckets_Pb_APIArchiveWatchSession: ServerSessionServerStreaming {
  /// Send a message to the stream. Nonblocking.
  func send(_ message: Buckets_Pb_ArchiveWatchReply, completion: @escaping (Error?) -> Void) throws
  /// Do not call this directly, call `send()` in the protocol extension below instead.
  func _send(_ message: Buckets_Pb_ArchiveWatchReply, timeout: DispatchTime) throws

  /// Close the connection and send the status. Non-blocking.
  /// This method should be called if and only if your request handler returns a nil value instead of a server status;
  /// otherwise SwiftGRPC will take care of sending the status for you.
  func close(withStatus status: ServerStatus, completion: (() -> Void)?) throws
}

internal extension Buckets_Pb_APIArchiveWatchSession {
  /// Send a message to the stream and wait for the send operation to finish. Blocking.
  func send(_ message: Buckets_Pb_ArchiveWatchReply, timeout: DispatchTime = .distantFuture) throws { try self._send(message, timeout: timeout) }
}

fileprivate final class Buckets_Pb_APIArchiveWatchSessionBase: ServerSessionServerStreamingBase<Buckets_Pb_ArchiveWatchRequest, Buckets_Pb_ArchiveWatchReply>, Buckets_Pb_APIArchiveWatchSession {}

